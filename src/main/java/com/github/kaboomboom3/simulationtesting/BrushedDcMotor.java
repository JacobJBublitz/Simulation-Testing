package com.github.kaboomboom3.simulationtesting;

/**
 * Simulates a brushed DC motor
 * <p>
 * Estimates the characteristics of a brushed DC motor using the following equations:
 * <ul>
 *     <li>V = IR + &omega;/K<sub>&omega;</sub></li>
 *     <li>&tau; = K<sub>&tau;</sub>*I</li>
 * </ul>
 * <p>
 * More information on DC motor dynamics can be found
 * <a href="http://hades.mech.northwestern.edu/index.php/Brushed_DC_Motor_Theory">here</a>.
 */
public final class BrushedDcMotor {
    private final double nominalVoltage;

    private final double maxVelocity;
    private final double maxTorque;

    /**
     * The resistance of the motor's windings in ohms (&Omega;)
     */
    private final double resistance;

    /**
     * The motor's velocity constant (or speed constant) in radians per volt second (rad/Vs)
     */
    private final double velocityConstant;

    /**
     * The motor's torque constant in newton meters per ampere (Nm/A)
     */
    private final double torqueConstant;

    public BrushedDcMotor(
            double nominalVoltage,
            double freeSpeed,
            double freeCurrent,
            double stallTorque,
            double stallCurrent
    ) {
        this.nominalVoltage = nominalVoltage;
        this.maxVelocity = freeSpeed;
        this.maxTorque = stallTorque;

        // We can calculate the resistance of the motor by solving the voltage equation at stall. The back-emf term can
        // be eliminated because the angular velocity of the output shaft is zero at stall.
        this.resistance = nominalVoltage / stallCurrent;

        // We can calculate the velocity constant by solving the voltage equation at the motor's free speed.
        this.velocityConstant = -freeSpeed / (freeCurrent * resistance - nominalVoltage);

        // We can calculate our torque constant by using a known torque and current draw
        this.torqueConstant = stallTorque / stallCurrent;
    }

    /**
     * Estimates the amount of current that the motor would draw
     *
     * @param voltage         The voltage applied to the motor
     * @param angularVelocity The angular velocity of the motor's output shaft in radians per second (rad/s)
     * @return The estimated current draw in amperes (A)
     */
    public double estimateCurrentDraw(double voltage, double angularVelocity) {
        // Solving the voltage equation for I gives us the following equation:
        // I = (V - w/Kw)/R

        return (voltage - angularVelocity / velocityConstant) / resistance;
    }

    public double estimateCurrentDraw(double torqueOutput) {
        return torqueOutput / torqueConstant;
    }

    /**
     * Estimates the amount of torque generated by the motor
     *
     * @param voltage         The voltage applied to the motor
     * @param angularVelocity The angular velocity of the motor's output shaft in radians per second (rad/s)
     * @return The estimated torque generated in newton meters (Nm)
     */
    public double estimateTorqueOutput(double voltage, double angularVelocity) {
        return estimateTorqueOutput(estimateCurrentDraw(voltage, angularVelocity));
    }

    /**
     * Estimates the torque generated by the motor
     *
     * @param currentDraw The amount of current being drawn by the motor in amperes (A)
     * @return The estimated torque generated in newton meters (Nm)
     */
    public double estimateTorqueOutput(double currentDraw) {
        // Use the equation t = Kt*I to find the torque output of the motor
        return torqueConstant * currentDraw;
    }

    public double estimateVoltageInput(double currentDraw, double angularVelocity) {
        return currentDraw * resistance + angularVelocity / velocityConstant;
    }

    /**
     * Gets the maximum voltage that can be applied to the motor
     *
     * @return The maximum voltage that can be applied to the motor in volts (V)
     */
    public double getNominalVoltage() {
        return nominalVoltage;
    }

    public double getMaxTorque() {
        return maxTorque;
    }

    public double getMaxVelocity() {
        return maxVelocity;
    }
}
